# This file is generated by objective.metadata
#
# Last update: Tue Sep 18 22:28:08 2018

import objc, sys

if sys.maxsize > 2 ** 32:
    def sel32or64(a, b): return b
else:
    def sel32or64(a, b): return a
if sys.byteorder == 'little':
    def littleOrBig(a, b): return a
else:
    def littleOrBig(a, b): return b

misc = {
}
constants = '''$MLModelAuthorKey$MLModelCreatorDefinedKey$MLModelDescriptionKey$MLModelErrorDomain$MLModelLicenseKey$MLModelVersionStringKey$'''
enums = '''$MLComputeUnitsAll@2$MLComputeUnitsCPUAndGPU@1$MLComputeUnitsCPUOnly@0$MLFeatureTypeDictionary@6$MLFeatureTypeDouble@2$MLFeatureTypeImage@4$MLFeatureTypeInt64@1$MLFeatureTypeInvalid@0$MLFeatureTypeMultiArray@5$MLFeatureTypeSequence@7$MLFeatureTypeString@3$MLImageSizeConstraintTypeEnumerated@2$MLImageSizeConstraintTypeRange@3$MLImageSizeConstraintTypeUnspecified@0$MLModelErrorCustomLayer@4$MLModelErrorCustomModel@5$MLModelErrorFeatureType@1$MLModelErrorGeneric@0$MLModelErrorIO@3$MLMultiArrayDataTypeDouble@65600$MLMultiArrayDataTypeFloat32@65568$MLMultiArrayDataTypeInt32@131104$MLMultiArrayShapeConstraintTypeEnumerated@2$MLMultiArrayShapeConstraintTypeRange@3$MLMultiArrayShapeConstraintTypeUnspecified@1$'''
misc.update({})
r = objc.registerMetaDataForSelector
objc._updatingMetadata(True)
try:
    r(b'MLDictionaryFeatureProvider', b'initWithDictionary:error:', {'arguments': {3: {'type_modifier': b'o'}}})
    r(b'MLFeatureDescription', b'isAllowedValue:', {'retval': {'type': 'Z'}})
    r(b'MLFeatureDescription', b'isOptional', {'retval': {'type': 'Z'}})
    r(b'MLFeatureDescription', b'setOptional:', {'arguments': {2: {'type': 'Z'}}})
    r(b'MLFeatureValue', b'featureValueWithDictionary:error:', {'arguments': {3: {'type_modifier': b'o'}}})
    r(b'MLFeatureValue', b'isEqualToFeatureValue:', {'retval': {'type': 'Z'}})
    r(b'MLFeatureValue', b'isUndefined', {'retval': {'type': 'Z'}})
    r(b'MLModel', b'compileModelAtURL:error:', {'arguments': {3: {'type_modifier': b'o'}}})
    r(b'MLModel', b'modelWithContentsOfURL:configuration:error:', {'arguments': {4: {'type_modifier': b'o'}}})
    r(b'MLModel', b'modelWithContentsOfURL:error:', {'arguments': {3: {'type_modifier': b'o'}}})
    r(b'MLModel', b'predictionFromFeatures:error:', {'arguments': {3: {'type_modifier': b'o'}}})
    r(b'MLModel', b'predictionFromFeatures:options:error:', {'arguments': {4: {'type_modifier': b'o'}}})
    r(b'MLModel', b'predictionsFromBatch:options:error:', {'arguments': {4: {'type_modifier': b'o'}}})
    r(b'MLMultiArray', b'dataPointer', {'retval': {'c_array_of_variable_length': True}})
    r(b'MLMultiArray', b'initWithDataPointer:shape:dataType:strides:deallocator:error:', {'arguments': {2: {'type_modifier': b'n', 'c_array_of_variable_length': True}, 6: {'callable': {'retval': {'type': b'v'}, 'arguments': {0: {'type': b'^v'}, 1: {'type': b'^v'}}}}, 7: {'type_modifier': b'o'}}})
    r(b'MLMultiArray', b'initWithShape:dataType:error:', {'arguments': {4: {'type_modifier': b'o'}}})
    r(b'MLPredictionOptions', b'setUsesCPUOnly:', {'arguments': {2: {'type': 'Z'}}})
    r(b'MLPredictionOptions', b'usesCPUOnly', {'retval': {'type': 'Z'}})
    r(b'NSObject', b'count', {'required': True, 'retval': {'type': sel32or64(b'i', b'q')}})
    r(b'NSObject', b'encodeToCommandBuffer:inputs:outputs:error:', {'required': False, 'retval': {'type': 'Z'}, 'arguments': {2: {'type': b'@'}, 3: {'type': b'@'}, 4: {'type': b'@'}, 5: {'type': '^@', 'type_modifier': b'o'}}})
    r(b'NSObject', b'evaluateOnCPUWithInputs:outputs:error:', {'required': True, 'retval': {'type': 'Z'}, 'arguments': {2: {'type': b'@'}, 3: {'type': b'@'}, 4: {'type': '^@', 'type_modifier': b'o'}}})
    r(b'NSObject', b'featureNames', {'required': True, 'retval': {'type': b'@'}})
    r(b'NSObject', b'featureProviderAtIndex:', {'required': False, 'retval': {'type': b'@'}, 'arguments': {2: {'type': b'q'}}})
    r(b'NSObject', b'featureProviderCount', {'required': False, 'retval': {'type': b'q'}})
    r(b'NSObject', b'featureValueForName:', {'required': True, 'retval': {'type': b'@'}, 'arguments': {2: {'type': b'@'}}})
    r(b'NSObject', b'featuresAtIndex:', {'required': True, 'retval': {'type': b'@'}, 'arguments': {2: {'type': sel32or64(b'i', b'q')}}})
    r(b'NSObject', b'initWithModelDescription:parameterDictionary:error:', {'required': True, 'retval': {'type': b'@'}, 'arguments': {2: {'type': b'@'}, 3: {'type': b'@'}, 4: {'type': '^@', 'type_modifier': b'o'}}})
    r(b'NSObject', b'initWithParameterDictionary:error:', {'required': True, 'retval': {'type': b'@'}, 'arguments': {2: {'type': b'@'}, 3: {'type': '^@', 'type_modifier': b'o'}}})
    r(b'NSObject', b'outputShapesForInputShapes:error:', {'required': True, 'retval': {'type': b'@'}, 'arguments': {2: {'type': b'@'}, 3: {'type': '^@', 'type_modifier': b'o'}}})
    r(b'NSObject', b'predictionFromFeatures:options:error:', {'required': True, 'retval': {'type': b'@'}, 'arguments': {2: {'type': b'@'}, 3: {'type': b'@'}, 4: {'type': '^@', 'type_modifier': b'o'}}})
    r(b'NSObject', b'predictionsFromBatch:options:error:', {'required': False, 'retval': {'type': b'@'}, 'arguments': {2: {'type': b'@'}, 3: {'type': b'@'}, 4: {'type': '^@', 'type_modifier': b'o'}}})
    r(b'NSObject', b'setWeightData:error:', {'required': True, 'retval': {'type': 'Z'}, 'arguments': {2: {'type': b'@'}, 3: {'type': '^@', 'type_modifier': b'o'}}})
finally:
    objc._updatingMetadata(False)
expressions = {}

# END OF FILE
